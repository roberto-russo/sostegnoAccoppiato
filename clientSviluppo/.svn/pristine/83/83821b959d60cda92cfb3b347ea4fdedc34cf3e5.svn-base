package it.csi.demetra.demetraws.zoo.controlli.visitor.entityRef;

import it.csi.demetra.demetraws.zoo.calcoli.Ref9901;
import it.csi.demetra.demetraws.zoo.calcoli.Ref9903;
import it.csi.demetra.demetraws.zoo.calcoli.entity.CapiControllati9901;
import it.csi.demetra.demetraws.zoo.calcoli.entity.CapiControllati9903;
import it.csi.demetra.demetraws.zoo.controlli.visitor.ControlloException;
import it.csi.demetra.demetraws.zoo.controlli.visitor.ControlloVisitable;
import it.csi.demetra.demetraws.zoo.controlli.visitor.ControlloVisitor;

public class Ref02_005 implements ControlloVisitable{
	
	//Lista di capi da recuperare dalla BDN
	private List<> listaCapi;

	@Override
    public Integer accept(ControlloVisitor visitor) throws ControlloException {
        return visitor.visit(this);
    }

	@Override
	public void controlliPreAmmissibilita() throws ControlloException {
		// Bisogna ancora definire i parametri da passare
		// Inizializzazione
		Ref9901 ref9901 = new Ref9901();
		Ref9903 ref9903 = new Ref9903();
		
		// Calcolo delle tempistiche di registrazione
		CapiControllati9901 capiControllati9901 = ref9901.calcolo();
		// Calcolo dei controlli di ammissibilità trasversali
		CapiControllati9903 capiControllati9903 = ref9903.calcolo();
		
		//Esito del calcolo sulle tempistiche di registrazione
		boolean ctrlTempisticaReg = CapiControllati9901.getEsito();
		//Esito del calcolo sui controlli di ammissibilità trasversali
		boolean ctrlAmmissTrasv = CapiControllati9903.getEsito();
		
		if(ctrlAmmissTrasv&&ctrlTempisticaReg) {
			//se entrambi i calcoli sono finiti senza errori
			
		} else if (!ctrlTempisticaReg) {
			//se ci sono stati errori nel calcolo sulle tempistiche di registrazione
		} else if (!ctrlTempisticaReg) {
			//se ci sono stati errori nel calcolo sui controlli di ammissibilità trasversali
		}
		
	}

	

}
