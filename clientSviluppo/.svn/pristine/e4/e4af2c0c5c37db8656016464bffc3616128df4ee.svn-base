package it.csi.zoo.calcoli;

import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import it.csi.zoo.calcoli.entity.CapiControllati9901;
import it.csi.zoo.calcoli.entity.Capo9901;
import it.csi.zoo.calcoli.entity.Ref;
import it.csi.zoo.interfaces.RefInterface;
import it.csi.zoo.model.Dmt_t_Tws_bdn_du_capi_bovini;
import it.csi.zoo.util.DateFestivitaRetriever;
import it.csi.zoo.util.LocalDateConverter;

public class Ref9901 extends Ref implements RefInterface<CapiControllati9901> {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(Ref9901.class);

	private CapiControllati9901 capiControllati = new CapiControllati9901();
	
	private static final int GIORNI_27 = 27;
	private static final int GIORNI_34 = 34;
	private static final int GIORNI_180 = 180;
	private static final int GIORNI_187 = 187;
	
	public Ref9901( String codIntervento,String annoCampagna, String cuaa) {
		

		setCodIntrervento(codIntervento);
		setAnnoCampagna(annoCampagna);
		setCuaa(cuaa);
		
	}

	/**
	 * TEMPISTICA REGISTRAZIONE CAPI
	 * Il calcolo dei due parametri è dato da:
	 *	tI = [Data di identificazione del vitello] - [Data di nascita del vitello] 
	 *	tR = [Data di registrazione in BDN della nascita del capo] - [Data di identificazione del vitello]
	 * 
	 * Il metodo ritorna un oggetto contenente :
	 * 1- la lista dei capi controllati con flagCapoAmmesso = 'S'/'N' e la motivazione
	 * 2- un campo booleano esito
	 * 
	 *  
	 * 
	 * @return lista capi
	 * 
	 */
	@Override
	public CapiControllati9901 calcolo() {
		
		recuperaDatiCapi();

		LOGGER.info("Inizio Calcolo 9901: calcolo() ");
		
		try {
			
			for (Capo9901 capo: capiControllati.getListaCapi9901()) {
				
				if(	   capo.getCapo().getDataNascitaVitello() != null 	  		&& 
					   capo.getCapo().getVitelloDataApplMarchio() != null 		&& 
					   capo.getCapo().getVitelloDataInserBdnNascita() != null	&&
					   !"".equals((capo.getCapo().getFlagDelegato())) 			&&
					   !"".equals((capo.getCapo().getFlagProrogaMarcatura()))		) 
				{
					
					Date dataIdentificazioneVitello = capo.getCapo().getVitelloDataApplMarchio();
					Date dataNascitaVitello = capo.getCapo().getDataNascitaVitello();
					Date dataRegistrazioneVitelloBDN = capo.getCapo().getVitelloDataInserBdnNascita();
					
					String flagDelegato = capo.getCapo().getFlagDelegato();
					String flagProrogaMarcatura = capo.getCapo().getFlagProrogaMarcatura();
					int tempisticaRegistrazione;
					int numGiorniFestiviCompresi = 0;

					LocalDate dataIdVit = LocalDateConverter.convertToLocalDateViaInstant(dataIdentificazioneVitello);
					LocalDate dataNascitaVit = LocalDateConverter.convertToLocalDateViaInstant(dataNascitaVitello);
					LocalDate dataRegVit = LocalDateConverter.convertToLocalDateViaInstant(dataRegistrazioneVitelloBDN);
						
					List<Date> giorniFestivi = DateFestivitaRetriever.getGiorniFestivi(String.valueOf(dataNascitaVit.getYear()));
					
					Date dataRegistrazioneBDNMenoSette = LocalDateConverter.convertToDateViaInstant(dataRegVit.minusDays(7));
					
					Period periodtI = Period.between(dataIdVit, dataNascitaVit);
					Period periodtR = Period.between(dataIdVit, dataRegVit);

					capo.settI(periodtI.getDays());
					capo.settR(periodtR.getDays());
					
					tempisticaRegistrazione = capo.gettI() + capo.gettR();
					
					
					
					if ( flagDelegato.equalsIgnoreCase("N") && flagProrogaMarcatura.equalsIgnoreCase("N") ) {
						//Caso 1 :
						if( tempisticaRegistrazione <= GIORNI_27 ) {
							capo.setFlagCapoAmmesso("S");
							capo.setMotivazione("Tempistica di registrazione rispettata");
						} else {
							capo.setFlagCapoAmmesso("N");
							capo.setMotivazione("Tempistica di registrazione non rispettata. "
									  		  + "Il capo è stato registrato con un ritardo di "+ ( tempisticaRegistrazione - GIORNI_27 ) +" giorni.");
						}
						
					} else if ( flagDelegato.equalsIgnoreCase("N") && flagProrogaMarcatura.equalsIgnoreCase("S") ) {
						//Caso 2 :
						if( tempisticaRegistrazione <= GIORNI_34 ) {
							
							capo.setFlagCapoAmmesso("S");
							capo.setMotivazione("Tempistica di registrazione rispettata");
							
						} else {
							
							capo.setFlagCapoAmmesso("N");
							capo.setMotivazione("Tempistica di registrazione non rispettata. "
											  + "Il capo è stato registrato con un ritardo di "+ ( tempisticaRegistrazione - GIORNI_34 ) +" giorni.");
						
						}
						
					} else if ( flagDelegato.equalsIgnoreCase("S") && flagProrogaMarcatura.equalsIgnoreCase("N") ) {
						//Caso 3 :
						if( tempisticaRegistrazione <= GIORNI_180 ) {
							
							capo.setFlagCapoAmmesso("S");
							capo.setMotivazione("Tempistica di registrazione rispettata");

				
						} else {
							
							capo.setFlagCapoAmmesso("N");
							capo.setMotivazione("Tempistica di registrazione non rispettata. "
									  		  + "Il capo è stato registrato con un ritardo di "+ ( tempisticaRegistrazione - GIORNI_180 ) +" giorni.");
				
						}
						
					} else if ( flagDelegato.equalsIgnoreCase("S") && flagProrogaMarcatura.equalsIgnoreCase("S") ) {
						//Caso 4 :
						for (Date giorno : giorniFestivi) {
							if( giorno.after(dataRegistrazioneBDNMenoSette) && giorno.before(dataRegistrazioneVitelloBDN )) {
								numGiorniFestiviCompresi += 1;
							}
						}
						
						if( numGiorniFestiviCompresi > 0 ) {
							
							if( tempisticaRegistrazione <= (GIORNI_187 + numGiorniFestiviCompresi) ) {
								
								capo.setFlagCapoAmmesso("S");
								capo.setMotivazione("Tempistica di registrazione rispettata");

							} else {
								
								capo.setFlagCapoAmmesso("N");
								capo.setMotivazione("Tempistica di registrazione non rispettata. "
										  		  + "Il capo è stato registrato con un ritardo di "+ ( tempisticaRegistrazione - ( GIORNI_187 + numGiorniFestiviCompresi) ) +" giorni.");
					
							}
							
						} else {
							
							if( tempisticaRegistrazione <= GIORNI_187 ) {
								
								capo.setFlagCapoAmmesso("S");
								capo.setMotivazione("Tempistica di registrazione rispettata");

							} else {
								
								capo.setFlagCapoAmmesso("N");
								capo.setMotivazione("Tempistica di registrazione non rispettata. "
										  		  + "Il capo è stato registrato con un ritardo di "+ ( tempisticaRegistrazione - GIORNI_187 ) +" giorni.");
					
							}
						}
					}
					
				} else {
					
					System.err.println("Campi del capo non valorizzati correttamente");
					LOGGER.error("Errore nel Calcolo 9901: - Campi del capo non valorizzati correttamente");
					return null;
				}
				
			}
			
			LOGGER.info("Fine Calcolo 9901: calcolo() ");
			
			
			controllaAmmissibilita(capiControllati);
			
			return capiControllati;
			
		} catch (Exception e) {
			
			System.err.println(e);
			LOGGER.error("Errore nel Calcolo 9901: - ",e);
			return null;
		}
	}
	/**
	 * Verifica di ammissibilità. 
	 * Se tutti i capi sono stati ammessi,
	 * allora la vacca è ammissibile a premio (esito=true),
	 * altrimenti la vacca non è ammissibile a premio (esito=false).
	 * 
	 * @param capiControllati
	 */
	private void controllaAmmissibilita(CapiControllati9901 capiControllati) {
		LOGGER.info("Inizio Controllo Ammissibilità 9901: controllaAmmissibilita() ");
		try {
			for (Capo9901 capo: capiControllati.getListaCapi9901()) {
				if(capo.getFlagCapoAmmesso().equalsIgnoreCase("N")) {
					CapiControllati9901.setEsito(false);
					break;
				}
			}
			LOGGER.info("Fine Controllo Ammissibilità 9901: controllaAmmissibilita() ");
		} catch (Exception e) {
			System.err.println(e);
			LOGGER.error("Errore nel Controllo Ammissibilità 9901: - ",e);
		}
		
	}
	private void recuperaDatiCapi() {
		//RECUPERO CON REPOSITORY O SERVICE
		List<Capo9901> listaCapi9901 = new ArrayList<Capo9901>();

		for (Dmt_t_Tws_bdn_du_capi_bovini capo: listaCapi) {
			listaCapi9901.add(new Capo9901(capo,0,0));
		}
		
		capiControllati.setListaCapi9901(listaCapi9901);
		
	}
}
