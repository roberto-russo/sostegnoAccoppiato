package it.csi.demetra.demetraws.zoo.controlli.visitor.entityRef;

import it.csi.demetra.demetraws.zoo.calcoli.CalcoloException;
import it.csi.demetra.demetraws.zoo.calcoli.Ref9901;
import it.csi.demetra.demetraws.zoo.calcoli.Ref9903;
import it.csi.demetra.demetraws.zoo.controlli.visitor.ControlloException;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_Tws_bdn_du_capi_bovini;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_errore;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_output_controlli;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_output_esclusi;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Component("ref02_004")
public class Ref02_004 extends Controllo {

    /* MODEL DA INIZIALIZZARE PER I CONTROLLI */
    private List<Dmt_t_Tws_bdn_du_capi_bovini> modelVacche;
    private int importoLiquidabile = 0;
    private List<Dmt_t_output_esclusi> listEsclusi = new ArrayList<>();

    @Override
    public void preEsecuzione() throws ControlloException {
        // RECUPERO DATI DALLA BDN
        modelVacche = getControlliService().getAllBoviniSessioneCuua(getSessione(), getAzienda().getCuaa(), getAzienda().getCodicePremio());

        Ref9901 ref9901 = new Ref9901(modelVacche, getSessione().getIdSessione(), getAzienda().getCodicePremio(), Long.valueOf(getAzienda().getAnnoCampagna()), getAzienda().getCuaa());
        try {
            modelVacche = ref9901.calcolo();
        } catch (CalcoloException e) {
            throw new ControlloException(new Dmt_t_errore(getSessione(), "REF_9901", getInput(), e.getMessage()));
        }

        Ref9903 ref9903 = new Ref9903(modelVacche, getAzienda().getCodicePremio(), Long.valueOf(getAzienda().getAnnoCampagna()), getAzienda().getCuaa(), getSessione());
        try {
            ref9903.calcolo();
        } catch (CalcoloException e) {
            throw new ControlloException(new Dmt_t_errore(getSessione(), "REF_9903", getInput(), e.getMessage()));
        }
    }

    @Override
    public void esecuzione() throws ControlloException {
        /*L’aiuto spetta al richiedente detentore della vacca al momento del parto.
        Qualora la vacca abbia partorito più di una volta nel corso dell’anno presso
        la stalla di diversi detentori susseguitisi nel tempo, il premio è erogato
        al detentore presso il quale è nato il primo capo.*/

        for (Dmt_t_Tws_bdn_du_capi_bovini b : modelVacche) {
            if (b.getDtFineDetenzione().before(b.getDtNascitaVitello())
                    || b.getDtInizioDetenzione().after(b.getDtNascitaVitello())) {
                aggiungiEscluso(b);
                continue;
            }

            List<Dmt_t_Tws_bdn_du_capi_bovini> listVitelli = getControlliService().getVitelliNatiDaBovini(getSessione().getIdSessione(), b.getCapoId(), b.getCodicePremio());
            Date giovane = null;
            for (Dmt_t_Tws_bdn_du_capi_bovini b2 : listVitelli)
                if (null != b2.getDtNascitaVitello())
                    if (null == giovane)
                        giovane = b2.getDtNascitaVitello();
                    else if (b2.getDtNascitaVitello().before(giovane))
                        giovane = b.getDtNascitaVitello();


            if (b.getDtFineDetenzione().before(giovane)
                    || b.getDtInizioDetenzione().after(giovane))
                importoLiquidabile++;
            else aggiungiEscluso(b);

        }
    }

    private void aggiungiEscluso(Dmt_t_Tws_bdn_du_capi_bovini b) {
        Dmt_t_output_esclusi escluso = new Dmt_t_output_esclusi();
        escluso.setCalcolo(this.getClass().getName());
        escluso.setCapoId(b.getCapoId());
        escluso.setMotivazioneEsclusione("");
        escluso.setSessione(getSessione());

        listEsclusi.add(escluso);
    }

    @Override
    public void postEsecuzione() throws ControlloException {
        // ESECUZIONI CONTROLLI PER SOGGETTO
        Dmt_t_output_controlli outputControlli = new Dmt_t_output_controlli();
        outputControlli.setSessione(getSessione());
        outputControlli.setAnnoCampagna(getAzienda().getAnnoCampagna());
        outputControlli.setCapiAmmissibili(importoLiquidabile);
        outputControlli.setCapiRichiesti(modelVacche.size());
        outputControlli.setCuaa(getAzienda().getCuaa());
        outputControlli.setIntervento(getAzienda().getCodicePremio());

        getControlliService().saveOutput(outputControlli);

        for (Dmt_t_output_esclusi o : listEsclusi)
            getControlliService().saveOutputEscl(o);

    }
}
