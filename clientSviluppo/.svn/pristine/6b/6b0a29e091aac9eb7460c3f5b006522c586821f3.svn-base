package it.csi.zoo.calcoli;

import java.util.function.BiPredicate;
import java.util.function.Predicate;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.csi.zoo.calcoli.entity.CalcoloAgnelleDaRimontaPremioIn;
import it.csi.zoo.calcoli.entity.CalcoloAgnelleDaRimontaPremioOut;
import it.csi.zoo.calcoli.entity.RefEsito;
import it.csi.zoo.repository.DsUBA_censimenti_allevamenti_ovini_repository;
import it.csi.zoo.services.Dmt_t_Tws_bdn_du_capi_ovicaprini_services;
import lombok.Getter;
import lombok.Setter;

//@Builder
//@AllArgsConstructor
//@NoArgsConstructor
@Service
public class Ref9902 implements Calcolo {
	
	private static Logger logger = LoggerFactory.getLogger(Ref9902.class);
	
	@Autowired
	Dmt_t_Tws_bdn_du_capi_ovicaprini_services bdnCapiOvicapriniService;
	
	
	//TODO Da sostituire con il service
	@Autowired
	DsUBA_censimenti_allevamenti_ovini_repository repUBA; 
	
	private static final String LIVELLO_SCRAPIE_L1 = "L1";
	

//	@Getter
//	@Setter
//	CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn;
	
	
	@Override
	public void preEsecuzione() throws CalcoloException {
	 logger.info("preEsecuzione - IN");
	 
	 CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn = getCalcoloAgnelleDaRimontaIn();
	 
	 boolean applicabile = isNotNull.and(hasLivelloScrapie).and(hasQdrCalcolabile).test(calcoloAgnelleDaRimontaIn);
	 
	 if(!applicabile)
		 throw new CalcoloException("Non Ã¨ possibile effettuare il calcolo");
	 
	 logger.info("preEsecuzione - OUT");
	}


	@Override
	public void esecuzione() throws CalcoloException {
		logger.info("esecuzione - IN");
		StringBuilder motivazioniSb = new StringBuilder("");
		CalcoloAgnelleDaRimontaPremioOut out = new CalcoloAgnelleDaRimontaPremioOut();
		
		CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn = getCalcoloAgnelleDaRimontaIn();
		String cuaa = calcoloAgnelleDaRimontaIn.getCuaa();
		
		Double quotaDaRimonta = getQuotaDaRimonta(calcoloAgnelleDaRimontaIn);
		Double quotaCapiPremioRichiesti = calcoloAgnelleDaRimontaIn.getQuotaCapiPremioRichiesti();
		
		String livelloScrapie = getLivelloScrapie();
		
		
		Double capiPagabili = null;
		if (quotaCapiPremioRichiesti > quotaDaRimonta ) {		
			capiPagabili = quotaDaRimonta * 20 / 100;
			motivazioniSb.append("quotaCapiPremioRichiesti ("+ quotaCapiPremioRichiesti +") > quotaDaRimonta (" + quotaDaRimonta + ")"
					+ " : si applica il 20% della qdr" );
		} else {
			capiPagabili = quotaDaRimonta;
			motivazioniSb.append("quotaCapiPremioRichiesti ("+ quotaCapiPremioRichiesti +") <= quotaDaRimonta (" + quotaDaRimonta + ")"
					+ " : si utilizza la quotaCapiPremioRichiesti " );
		}
		
		Double quotaCapiPremioAmmessi = null;
		if (LIVELLO_SCRAPIE_L1.equals(livelloScrapie)) {
			quotaCapiPremioAmmessi = capiPagabili - (capiPagabili * 35 / 100);
		} else {
			quotaCapiPremioAmmessi = capiPagabili - (capiPagabili * 75 / 100);
		}
		
		out.setQuotaCapiPremio(quotaCapiPremioAmmessi);
		out.setEsito(RefEsito.OK);
		out.setCuaa(cuaa);
		out.setMotivazione(motivazioniSb.toString());
		logger.info("esecuzione - OUT");
	}
		


	@Override
	public void postEsecuzione() throws CalcoloException {
		logger.info("postEsecuzione - IN");
		//TODO salvare su db
		
		logger.info("postEsecuzione - OUT");
		
	}
	
	private Double getQuotaDaRimonta(CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn) {
		Double quotaDaRimonta = null;
		if (calcoloAgnelleDaRimontaIn.getUbaOviniCensimento() != null) {
			quotaDaRimonta = calcoloAgnelleDaRimontaIn.getUbaOviniCensimento().getoCapiTot().doubleValue();
		} else {
			quotaDaRimonta = new Double(calcoloAgnelleDaRimontaIn.getBdnOviniRegistroStallaList().size());
		}

		
		return quotaDaRimonta;
	}
	
	private String getLivelloScrapie() {
		String livelloScrapie = null;
//		return calcoloAgnelleDaRimontaIn.getUbaOviniCensimento().getCodiceQualidicaScrapie();
		return livelloScrapie;
	}
//	
//	private Double getCapiPagabili() {
//		
//	}
	
	
	//TODO Definire parametri in ingresso
	private CalcoloAgnelleDaRimontaPremioIn getCalcoloAgnelleDaRimontaIn() {
		CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaPremioIn = null;
		//TODO Recupeare services necessari
		
//		bdnCapiOvicapriniService.
		
		return calcoloAgnelleDaRimontaPremioIn;
		
	}
	
	
	private Predicate<CalcoloAgnelleDaRimontaPremioIn> isNotNull = x -> {
		boolean res = x != null;
		if (!res)
			logger.info("null reference");
		return res;
	};
	
	private Predicate<CalcoloAgnelleDaRimontaPremioIn> hasLivelloScrapie = x -> {
		boolean res = x.getUbaOviniCensimento() != null ;
//				&& x.getUbaOviniCensimento().get != null;
		if (!res)
			logger.info("livello scrapie non presente");
		return res;
	};
	
	private Predicate<CalcoloAgnelleDaRimontaPremioIn> hasQdrCalcolabile = x -> {
		boolean res = x.getUbaOviniCensimento() != null || x.getBdnOviniRegistroStallaList() != null;
		if (!res)
			logger.info("quota da rimonta non calcolabile");
		return res;
	};
	
	private BiPredicate<Double,Double> hasQuotaCapiPremioGreaterThanQdr = (qcp, qdr) -> qcp < qdr;

}
