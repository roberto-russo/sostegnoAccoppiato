package it.csi.zoo.transformer;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;

import javax.xml.bind.JAXBException;

import org.springframework.beans.factory.annotation.Autowired;

import it.csi.srmanags.wsbridge2.Capo;
import it.csi.srmanags.wsbridge2.CapoMacellato;
import it.csi.srmanags.wsbridge2.CapoOvicaprino;
import it.csi.srmanags.wsbridge2.CapoVacca;
import it.csi.srmanags.wsbridge2.Response;
import it.csi.srmanags.wsbridge2.WbUbaCensimentoOvino2012VO;
import it.csi.zoo.model.Dmt_d_clsPremio_ValidazioneResponse;
import it.csi.zoo.model.Dmt_t_Tbdn_du_capi;
import it.csi.zoo.model.Dmt_t_Tws_bdn_du_capi_bovini;
import it.csi.zoo.model.Dmt_t_Tws_bdn_du_capi_ovicaprini;
import it.csi.zoo.model.Dmt_t_clsCapoMacellato;
import it.csi.zoo.model.DsUBA_censimenti_allevamenti_ovini;


public class TransformerData {

	@Autowired
	List<Dmt_t_Tws_bdn_du_capi_ovicaprini> ovicaprini;
	
	@Autowired
	List<Dmt_t_clsCapoMacellato> capiMacellati;
	
	@Autowired
	List<Dmt_t_Tws_bdn_du_capi_bovini> capiBovini;
	
	@Autowired
	List<Dmt_t_Tbdn_du_capi> capi;
	
	DateFormat format = new SimpleDateFormat("DD/MM/YYYY", Locale.ITALIAN);

	public TransformerData() {
	}

	public DsUBA_censimenti_allevamenti_ovini TransformDsUBA_censimenti_allevamenti_ovini(Response response)
			throws JAXBException {
		
		DsUBA_censimenti_allevamenti_ovini model = new DsUBA_censimenti_allevamenti_ovini();
		
		List<WbUbaCensimentoOvino2012VO> censimOvini =  response.getVUbaCensimentoOvino2012();
		
		for(WbUbaCensimentoOvino2012VO x : censimOvini) {
			model.setCensimentoId(x.getIdCensimento());
			model.setpAllevId(x.getIdAllevamento());
			model.setAziendaCodice(x.getCodiceAzienda());
			model.setCodFiscaleProp(x.getCodFiscProprietario());
			model.setCodFiscaleDete(x.getCodFiscDetentore());
			model.setSpecieCodice(x.getCodiceSpecie());
			model.setSpecieDescrizione(x.getDescrizioneSpecie());
			model.setDataInizioPeriodo(x.getDataInizioPeriodo().toGregorianCalendar().getTime());
			model.setDataFinePeriodo(x.getDataFinePeriodo().toGregorianCalendar().getTime());
			model.setoMaschiAdulti(x.getOviniMaschiAdulti());
			model.setoMaschiAdultiLib(x.getOviniMaschiAdultiLib());
			model.setoFemmineAdulte(x.getOviniFemmineAdulte());
			model.setoFemmineAdulteLib(x.getOviniFemmineAdulteLib());
			model.setoMaschiRimonta(x.getOviniMaschiRimonta());
			model.setoMaschiRimontaLib(x.getOviniMaschiRimontaLib());
			model.setoFemmineRimonta(x.getOviniFemmineRimonta());
			model.setoFemmineRimontaLib(x.getOviniFemmineRimontaLib());
			model.setoCapiTot(x.getOviniCapiTotali());
			model.setoAgnelliMacTot(x.getAgnelliMacellatiTotali());
			model.setcMaschiAdulti(x.getCapriniMaschiAdulti());
			model.setcMaschiAdultiLib(x.getCapriniMaschiAdultiLib());
			model.setcFemmineAdulte(x.getCapriniFemmineAdulte());
			model.setcFemmineAdulteLib(x.getCapriniFemmineAdulteLib());
			model.setcMaschiRimonta(x.getCapriniMaschiRimonta());
			model.setcMaschiRimontaLib(x.getCapriniMaschiRimontaLib());
			model.setcFemmineRimonta(x.getCapriniFemmineRimonta());
			model.setcFemmineRimontaLib(x.getCapriniFemmineRimontaLib());
			model.setcCapiTot(x.getCapriniCapiTotali());
			model.setcCaprettiMacTot(x.getCaprettiMacellatiTotali());
			model.setDataCensimento(x.getDataCensimento().toGregorianCalendar().getTime());
			model.setDtComAutorita(x.getDataComunicazioneAutorita().toGregorianCalendar().getTime());
			
		}
			return model;
	}

	public Dmt_d_clsPremio_ValidazioneResponse TransformDmt_d_clsPremio_ValidazioneResponse(Response response)
			throws JAXBException, ParseException {

		List<Capo> listaCapi = response.getVCapi(); //DEPRECARIATA E NON MOSTRATA SULLA DOCUMENTAZIONE BDN
		List<CapoOvicaprino> listaCapiOvicaprini = response.getVCapiOvicaprini();
		List<CapoMacellato> listaCapoMacellato = response.getVCapiMacellati();
		List<CapoVacca> listaCapoVacca = response.getVCapiVacche();
		long numeroCapi = listaCapi.size() + listaCapiOvicaprini.size() + listaCapoMacellato.size() + listaCapoVacca.size();		
		
		Dmt_d_clsPremio_ValidazioneResponse model = new Dmt_d_clsPremio_ValidazioneResponse();
		model.setErrDescr(response.getDescrizioneErrore());
		model.setErrCod(response.getCodiceErrore());
		model.setNumeroCapi(numeroCapi);
		
		
		for(CapoOvicaprino x : listaCapiOvicaprini) {
			
			Dmt_t_Tws_bdn_du_capi_ovicaprini temp = new Dmt_t_Tws_bdn_du_capi_ovicaprini();
			temp.setAllevId(x.getAllevId());
			temp.setCapoId(x.getCapoId());
			temp.setAziendaCodice(x.getAziendaCodice());
			temp.setCodice(x.getCodice());
			temp.setConsMedia(x.getConsMedia());
			temp.setCuaa(x.getCuaa());
			temp.setDtApplMarchio(format.parse(x.getDtApplMarchio()));
			temp.setDtComMacellazione(format.parse(x.getDtComMacellazione()));
			temp.setDtComNascita(format.parse(x.getDtComNascita()));
			temp.setDtFineDetenzione(format.parse(x.getDtFineDetenzione()));
			temp.setDtInizioDetenzione(format.parse(x.getDtInizioDetenzione()));
			temp.setDtInserimentoBdnNascita(format.parse(x.getDtInserimentoBdnNascita()));
			temp.setDtMacellazione(format.parse(x.getDtMacellazione()));
			temp.setDtNascita(format.parse(x.getDtNascita()));
			temp.setDtRegistrMacellazione(format.parse(x.getDtRegistrMacellazione()));
			temp.setDtUltimoPrelProfilassi(format.parse(x.getDtUltimoPrelProfilassi()));
			temp.setFlagDelegatoNascita(x.getFlagDelegatoNascita());
			temp.setGenotipo(x.getGenotipo());
			temp.setRazzaCodice(x.getRazzaCodice());
			temp.setRuoloUtenteNascita(x.getRuoloUtenteNascita());
			temp.setSesso(x.getSesso());
			
			ovicaprini.add(temp);
		}
		
		for(CapoMacellato x : listaCapoMacellato) {
			
			Dmt_t_clsCapoMacellato temp = new Dmt_t_clsCapoMacellato();
			temp.setCapoId(x.getCapoId());
			temp.setAllevId(x.getAllevId());
			temp.setCodice(x.getCodice());
			temp.setRazzaCodice(x.getRazzaCodice());
			temp.setSesso(x.getSesso());
			temp.setDtNascita(format.parse(x.getDtNascita()));
			temp.setAziendaCodice(x.getAziendaCodice());
			temp.setAziendaLatitudine(x.getAziendaLatitudine());
			temp.setAziendaLongitudine(x.getAziendaLongitudine());
			temp.setDtIngresso(format.parse(x.getDtIngresso()));
			temp.setDtMacellazione(format.parse(x.getDtMacellazione()));
			temp.setCodLibro(x.getCodLibro());
			temp.setDescrLibro(x.getDescrLibro());
			temp.setDtComAutoritaIngresso(format.parse(x.getDtComAutoritaIngresso()));
			temp.setDtInserimentoBdnIngresso(format.parse(x.getDtInserimentoBdnIngresso()));
			temp.setCuaa(x.getCuaa());
			temp.setDtComAutoritaUscita(format.parse(x.getDtComAutoritaUscita()));
			temp.setDtUscita(format.parse(x.getDtUscita()));
			temp.setDtInserimentoBdnUscita(format.parse(x.getDtInserimentoBdnUscita()));
			temp.setDtInizioDetenzione(format.parse(x.getDtInizioDetenzione()));
			temp.setDtFineDetenzione(format.parse(x.getDtFineDetenzione()));
			temp.setFlagDelegatoUscita(x.getFlagDelegatoUscita());
			temp.setFlagDelegatoIngresso(x.getFlagDelegatoIngresso());
			
			capiMacellati.add(temp);
		}
		
		for(CapoVacca x : listaCapoVacca) {
			Dmt_t_Tws_bdn_du_capi_bovini temp = new Dmt_t_Tws_bdn_du_capi_bovini();
			
			temp.setAllev_id(x.getAllevId());
			temp.setAziendaCodice(x.getAziendaCodice());
			temp.setAziendaLatitudine(x.getAziendaLatitudine());
			temp.setAziendaLongitudine(x.getAziendaLongitudine());
			temp.setCapoId(x.getCapoId());
			temp.setCodLibro(x.getCodLibro());
			temp.setCodice(x.getCodice());
			temp.setCodiceVitello(x.getCodiceVitello());
			temp.setCuaa(x.getCuaa());
			temp.setDescLibro(x.getDescrlibro());
			temp.setDtFineDetenzione(format.parse(x.getDtFineDetenzione()));
			temp.setDtInizioDetenzione(format.parse(x.getDtInizioDetenzione()));
			temp.setDataNascita(format.parse(x.getDtNascita()));
			temp.setDataNascitaVitello(format.parse(x.getDtNascitaVitello()));
			temp.setFlagDelegato(x.getFlagDelegato());
			temp.setFlagDelegatoIngressoVacca(x.getFlagDelegatoIngressoVacca());
			temp.setFlagDelegatoIngressoVitello(x.getFlagDelegatoIngressoVitello());
			temp.setFlagDelegatoNascitaVitello(x.getFlagDelegatoNascitaVitello());
			temp.setFlagIbr(x.getFlagIBR());
			temp.setFlagProrogaMarcatura(x.getFlagProrogaMarcatura());
			temp.setFlagRispettoPrevalenzaIbr(x.getFlagRispettoPrevalenzaIBR());
			temp.setRazzaCodice(x.getRazzaCodice());
			temp.setSesso(x.getSesso());
			temp.setSessoVitello(x.getSessoVitello());
			temp.setVaccaDtComAutIngresso(format.parse(x.getVaccaDtComAutoritaIngresso()));
			temp.setVaccaDtIngresso(format.parse(x.getVaccaDtIngresso()));
			temp.setVaccaDtInserBdnIngresso(format.parse(x.getVaccaDtInserimentoBdnIngresso()));
			temp.setVitelloCapoId(x.getVitelloCapoId());
			temp.setVitelloDtApplMarchio(format.parse(x.getVitelloDtApplMarchio()));
			temp.setVitelloDtComAutIngresso(format.parse(x.getVitelloDtComAutoritaIngresso()));
			temp.setVitelloDtComAutNascita(format.parse(x.getVitelloDtComAutoritaNascita()));
			temp.setVitello_data_ins_bdn_ingresso(format.parse(x.getVitelloDtInserimentoBdnIngresso()));
			temp.setVitelloDtInserBdnNascita(format.parse(x.getVitelloDtInserimentoBdnNascita()));
			temp.setVitelloTipoOrigine(x.getVitelloTipoOrigine());
			
			capiBovini.add(temp);
		}
		
		for(Capo x : listaCapi) {
			Dmt_t_Tbdn_du_capi temp = new Dmt_t_Tbdn_du_capi();
			
			temp.setAllevId(x.getAllevId());
			temp.setAziendaCodice(x.getAziendaCodice());
			temp.setCapoCodMadre(x.getCapoCodMadre());
			temp.setCapoId(x.getCapoId());
			temp.setCodLibroMadre(x.getCodLibroMadre());
			temp.setCodice(x.getCodice());
			temp.setDescLibroMadre(x.getDescLibroMadre());
			temp.setDtFineDetenzione(format.parse(x.getDtFineDetenzione()));
			temp.setDtInizioDetenzione(format.parse(x.getDtInizioDetenzione()));
			temp.setDtMacellazione(format.parse(x.getDtMacellazione()));
			temp.setDtNascita(format.parse(x.getDtNascita()));
			temp.setRazzaCodice(x.getRazzaCodice());
			temp.setSesso(x.getSesso());
			
			capi.add(temp);
			
		}
		
		model.setClsCapoMacellato(capiMacellati);
		model.setClsCapoOvicaprino(ovicaprini);
		model.setClsCapoVacca(capiBovini);
		model.setClsCapo(capi);

		return model;
	}
}