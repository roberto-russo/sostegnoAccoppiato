package it.csi.demetra.demetraws.zoo.calcoli;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import it.csi.demetra.demetraws.zoo.calcoli.entity.CalcoloAgnelleDaRimontaPremioIn;
import it.csi.demetra.demetraws.zoo.calcoli.entity.CapiControllati9902;
import it.csi.demetra.demetraws.zoo.interfaces.RefInterface;
import it.csi.demetra.demetraws.zoo.model.Dmt_s_sessione;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_DsUBA_censimenti_allevamenti_ovini;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_Ref9902;
import it.csi.demetra.demetraws.zoo.model.Dmt_t_Tws_bdn_du_capi_ovicaprini;
import it.csi.demetra.demetraws.zoo.model.Rpu_V_pratica_zoote;
import it.csi.demetra.demetraws.zoo.services.AziendaService;
import it.csi.demetra.demetraws.zoo.services.Dmt_t_DsUBA_censimenti_allevamenti_ovini_services;
import it.csi.demetra.demetraws.zoo.services.Dmt_t_Ref9902_services;
import it.csi.demetra.demetraws.zoo.services.Dmt_t_Tws_bdn_du_capi_ovicaprini_services;
import it.csi.demetra.demetraws.zoo.shared.Constants;

//@Builder
//@AllArgsConstructor
//@NoArgsConstructor
//@Service
public class Ref9902 implements RefInterface<CapiControllati9902>, Calcolo {

	private static Logger logger = LoggerFactory.getLogger(Ref9902.class);

	public final static String ESITO_OK = "OK";
	public final static String ESITO_KO = "KO";
	
	public final static List<String> codiciPremio = Stream.of(Constants.PREMIO_320).collect(Collectors.toList());

	@Autowired
	Dmt_t_Tws_bdn_du_capi_ovicaprini_services bdnCapiOvicapriniService;
	

	@Autowired
	AziendaService aziendaService;

	@Autowired
	Dmt_t_Ref9902_services ref9902Service;

	@Autowired
	Dmt_t_DsUBA_censimenti_allevamenti_ovini_services ubaCensimentiOviniService;

	private CapiControllati9902 capiControllati9902;

	private CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn;
	
	private StringBuilder errorMessage;

	private static final String LIVELLO_SCRAPIE_L1 = "L1";

	/**
	 * CALCOLO 9902
	 *
	 *
	 * Il metodo ritorna un oggetto contenente :
	 *
	 * 1- la quota dei capi ammessi a premio 2- un campo booleano esito che indica
	 * se il calcolo è andato a buon fine 3- una stringa motivazioneEsitoCalcolo che
	 * contiene le motivazioni dell'esito del calcolo
	 *
	 * @return capiControllati9902
	 * @throws CalcoloException
	 */
	@Override
	public CapiControllati9902 calcolo(Long idSessione) throws CalcoloException {
		logger.info("calcolo - IN");

		Integer currentYearAnnoCampagna = LocalDate.now().getYear();
		List<Rpu_V_pratica_zoote> aziende = aziendaService.getByCodiciPremioAndAnnoCampagna(codiciPremio,
				currentYearAnnoCampagna);

		for (Rpu_V_pratica_zoote azienda : aziende) {
			try {
				preEsecuzione(idSessione, azienda.getCuaa());
				esecuzione();
				postEsecuzione();
			} catch (CalcoloException ex) {
				logger.error("calcolo - {}", ex.getMessage());
			}

		}

		logger.info("calcolo - OUT");
		return capiControllati9902;
	}

	@Override
	public void preEsecuzione(Long idSessione, String cuaa) throws CalcoloException {
		logger.info("preEsecuzione - IN");

		logger.info("idSessione: {}", idSessione);
		logger.info("cuaa: {}", cuaa);
		
		errorMessage = new StringBuilder("");
		
		if (idSessione == null || cuaa == null)
			throw new RuntimeException("Si è verificato un errore imprevisto: idSesisone o cuaa non valorizzati correttamente");
		
		// Inizializzo la variabile d'istanza output del calcolo
		capiControllati9902 = new CapiControllati9902();

		// Inizializzo la variabile d'istanza input del calcolo
		calcoloAgnelleDaRimontaIn = getCalcoloAgnelleDaRimontaIn(idSessione, cuaa);

		boolean applicabile = isNotNull.and(hasLivelloScrapie).and(hasQdrCalcolabile).test(calcoloAgnelleDaRimontaIn);

		if (!applicabile) {
			logger.info(
					"preEsecuzione - Non è possibile effettuare il calcolo, condizioni preliminari non soddisfatte. Salvo il risultato sul db.");
			capiControllati9902 = new CapiControllati9902(idSessione, cuaa, false, errorMessage.toString(), null);

			postEsecuzione();
			throw new CalcoloException(
					"Non è possibile effettuare il calcolo per idSessione " + idSessione + " e cuaa " + cuaa);
		}

		logger.info("preEsecuzione - OUT");
	}

	@Override
	public void esecuzione() throws CalcoloException {
		logger.info("esecuzione - IN");
		try {
			StringBuilder motivazioniSb = new StringBuilder("");

			Double quotaDaRimonta = getQuotaDaRimonta(calcoloAgnelleDaRimontaIn);
			Double quotaCapiPremioRichiesti = calcoloAgnelleDaRimontaIn.getQuotaCapiPremioRichiesti();

			String livelloScrapie = getLivelloScrapie();

			Double capiPagabili = null;
			if (quotaCapiPremioRichiesti > quotaDaRimonta) {
				capiPagabili = quotaDaRimonta * 20 / 100;
				motivazioniSb.append("quotaCapiPremioRichiesti (" + quotaCapiPremioRichiesti + ") > quotaDaRimonta ("
						+ quotaDaRimonta + ")" + " : si applica il 20% della qdr");
			} else {
				capiPagabili = quotaDaRimonta;
				motivazioniSb.append("quotaCapiPremioRichiesti (" + quotaCapiPremioRichiesti + ") <= quotaDaRimonta ("
						+ quotaDaRimonta + ")" + " : si utilizza la quotaCapiPremioRichiesti ");
			}

			Double quotaCapiPremioAmmessi = null;
			if (LIVELLO_SCRAPIE_L1.equals(livelloScrapie)) {
				quotaCapiPremioAmmessi = capiPagabili - (capiPagabili * 35 / 100);
			} else {
				quotaCapiPremioAmmessi = capiPagabili - (capiPagabili * 75 / 100);
			}


			capiControllati9902 = new CapiControllati9902(calcoloAgnelleDaRimontaIn.getIdSessione(), calcoloAgnelleDaRimontaIn.getCuaa(),
					true, motivazioniSb.toString(), quotaCapiPremioAmmessi);

		} catch (Exception ex) {
			logger.error("esecuzione - {}", ex.getMessage());
			capiControllati9902 = new CapiControllati9902(calcoloAgnelleDaRimontaIn.getIdSessione(), calcoloAgnelleDaRimontaIn.getCuaa(),
					false, ex.getMessage(), null);

		}

		logger.info("esecuzione - OUT");
	}

	@Override
	public void postEsecuzione() throws CalcoloException {
		logger.info("postEsecuzione - IN");

		Dmt_t_Ref9902 ref9902 = new Dmt_t_Ref9902();

		Dmt_s_sessione sessione = new Dmt_s_sessione();
		
		sessione.setIdSessione(capiControllati9902.getIdSessione());
		
		ref9902.setSessione(sessione);
		ref9902.setEsito(capiControllati9902.isEsito() ? ESITO_OK : ESITO_KO);
		ref9902.setCuaa(capiControllati9902.getCuaa());
		ref9902.setMotivazioni(capiControllati9902.getMotivazioni());
		ref9902.setQuotaCapiPremio(capiControllati9902.getQuotaCapiPremio());
		ref9902.setDataInserimento(new Date());

		ref9902Service.save(ref9902);

		logger.info("postEsecuzione - OUT");

	}

	private Double getQuotaDaRimonta(CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn) {
		Double quotaDaRimonta = null;
		if (calcoloAgnelleDaRimontaIn.getUbaOviniCensimento() != null
				&& calcoloAgnelleDaRimontaIn.getUbaOviniCensimento().getoCapiTot() != null) {
			quotaDaRimonta = calcoloAgnelleDaRimontaIn.getUbaOviniCensimento().getoCapiTot().doubleValue();
		} else {
			quotaDaRimonta = new Double(calcoloAgnelleDaRimontaIn.getBdnOviniRegistroStallaList().size());
		}

		return quotaDaRimonta;
	}

	private String getLivelloScrapie() {
		// TODO Valorizzare correttamente il livello delle scrapie
		String livelloScrapie = LIVELLO_SCRAPIE_L1;
//		return calcoloAgnelleDaRimontaIn.getUbaOviniCensimento().getCodiceQualidicaScrapie();
		return livelloScrapie;
	}

	private CalcoloAgnelleDaRimontaPremioIn getCalcoloAgnelleDaRimontaIn(Long idSessione, String cuaa) {
		CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaPremioIn = null;

		List<Dmt_t_Tws_bdn_du_capi_ovicaprini> registroStalla = bdnCapiOvicapriniService.getCapiOvicapriniBdnByIdSessioneAndCuaa(idSessione, cuaa);

		// TODO Verificare unicità del censimento data una sessione e il codice azienda
		List<Dmt_t_DsUBA_censimenti_allevamenti_ovini> censimento = ubaCensimentiOviniService.getCensimOviniByIdSessioneAndCodiceAzienda(idSessione, cuaa);

		if (censimento != null && registroStalla != null) {
			// TODO Verificare corretta valorizzazione dei campi
			calcoloAgnelleDaRimontaPremioIn = CalcoloAgnelleDaRimontaPremioIn.builder().idSessione(idSessione)
					.bdnOviniRegistroStallaList(registroStalla).cuaa(cuaa).quotaCapiPremioRichiesti(registroStalla.size())
					.ubaOviniCensimento(censimento.get(0)).build();
		}


		return calcoloAgnelleDaRimontaPremioIn;

	}

	private Predicate<CalcoloAgnelleDaRimontaPremioIn> isNotNull = x -> {
		boolean res = x != null;
		if (!res) {
			logger.info("null reference");
			errorMessage.append("input CalcoloAgnelleDaRimontaPremioIn is null");
		}
			
		return res;
	};

	private Predicate<CalcoloAgnelleDaRimontaPremioIn> hasLivelloScrapie = x -> {
		boolean res = x.getUbaOviniCensimento() != null;
//				&& x.getUbaOviniCensimento().get != null;
		if (!res) {
			logger.info("livello scrapie non presente");
			errorMessage.append("livello scrapie non presente");
		}
			
		return res;
	};

	private Predicate<CalcoloAgnelleDaRimontaPremioIn> hasQdrCalcolabile = x -> {
		boolean res = x.getUbaOviniCensimento() != null || x.getBdnOviniRegistroStallaList() != null;
		if (!res) {
			logger.info("quota da rimonta non calcolabile");
			errorMessage.append("quota da rimonta non calcolabile");
		}
		return res;
	};

	public CapiControllati9902 getCapiControllati9902() {
		return capiControllati9902;
	}

	public void setCapiControllati9902(CapiControllati9902 capiControllati9902) {
		this.capiControllati9902 = capiControllati9902;
	}

	public CalcoloAgnelleDaRimontaPremioIn getCalcoloAgnelleDaRimontaIn() {
		return calcoloAgnelleDaRimontaIn;
	}

	public void setCalcoloAgnelleDaRimontaIn(CalcoloAgnelleDaRimontaPremioIn calcoloAgnelleDaRimontaIn) {
		this.calcoloAgnelleDaRimontaIn = calcoloAgnelleDaRimontaIn;
	}
	
	


}
